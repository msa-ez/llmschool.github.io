{"hash":"f22f72dbfd282bf17cc022af29a7f15a27f0c94e","data":{"thisPage":{"id":"ef65af528625f3df4341f189681a2066","name":"Legacy","mockData":"{\"레거시 분석과 전환\":\"unleash\"}","source":"<template>\n    <div>\n        <mark-down class=\"content\">\n            \n\n## AI를 활용한 레거시 분석 및 전환\n\n- 먼저 https://github.com/msa-school/food-delivery-app-gen 에 접속하여 Github Repository fork를 진행합니다.\n\n- 이후, fork한 Repository를 PC에 내려받은 후 Cursor IDE에서 프로젝트를 실행합니다.\n\n- Ctrl + L > '@'입력 > 'Folders'클릭 > 'order-management'클릭을 진행하여 폴더 내부의 파일 전체에 관한 질문을 보낼 수 있습니다.\n\n- 이후, 폴더 내부에 위치한 파일들의 이해를 목적으로 하는 프롬프트를 다음과 같이 입력합니다.\n```\nPrompt: 이 폴더가 전체적으로 뭘 하는지 설명해줘\n```\n- 프롬프팅 결과, 아래과 같이 코드 설명에 대한 내용을 생성합니다.\n```\norder-management 폴더는 주문 관리 시스템을 구현한 것입니다. \n이 시스템은 Spring Boot, JDBC, H2 데이터베이스를 사용하여 주문 생성 및 주문 상태를 업데이트하는 기능을 제공합니다. \n더불어 클래스나 JPA 리포지토리를 사용하지 않고, 서비스 레이어 컨트롤러에서 직접 SQL을 실행하여 데이터베이스와 상호작용합니다.\n\n\n주요 구성 요소는 다음과 같습니다:\n\n- Controller: HTTP 요청을 처리하며, 주문 생성 및 주문 상태 업데이트 요청을 서비스 계층으로 전달합니다.\n  - OrderController는 /orders 엔드포인트를 통해 주문 생성(POST) 및 주문 상태 업데이트(PUT) 요청을 처리합니다.\n\n- Service: 비즈니스 로직을 수행합니다. 주문 생성 및 주문 상태 업데이트 요청을 처리합니다.\n  - OrderService는 JDBC를 사용하여 데이터베이스에 주문 정보를 생성하거나 업데이트합니다.\n\n- DTO(Data Transfer Object): 클라이언트와 서버 간 데이터 전송에 사용되는 객체입니다.\n  - OrderRequest와 UpdateOrderStatusRequest는 각각 주문 생성 및 주문 상태 업데이트 요청에 필요한 데이터를 담습니다.\n\n- Database Schema: H2 데이터베이스에 주문 정보를 저장하기 위한 스키마를 정의합니다.\n  - schema.sql 파일에는 orders 테이블 생성 구문이 포함되어 있습니다.\n\n- Maven Configuration (pom.xml): 프로젝트의 의존성 및 빌드 설정을 정의합니다. Spring Boot 3, H2 데이터베이스, JDBC 등의 의존성이 포함되어 있습니다.\n\n- Execution Script (run.sh): 프로젝트를 실행하고 실행하기 위한 스크립트입니다. Maven 명령어를 사용하여 Spring Boot 어플리케이션을 실행합니다.\n\n이 프로젝트는 주문 받고, 주문 상태를 업데이트하는 간단한 주문 관리 시스템을 구현하는 데 필요한 주요 구성 요소를 포함하고 있습니다.\n```\n\n다음은 폴더를 멘션한 상태에서 코드 품질을 평가하는 예제입니다.\n\n- 코드 분석을 진행한 Copilot 창에서 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 어떤 아키텍쳐 스타일? 1.트랜잭션 스크립트 2. 액티브 오브젝트 3. 도메인 클래스\n```\n- 프롬프팅 결과, 아래와 같이 폴더가 사용중인 아키텍쳐 스타일에 대한 설명이 생성된 것을 확인할 수 있습니다.\n```\n이 프로젝트는 레거시 시스템을 아키텍처 스타일을 사용하고 있습니다. 이는 도메인 클래스나 JPA 리포지토리를 사용하지 않고, \n서비스 레이어에서 직접 SQL을 사용하여 데이터베이스와의 통신을 처리하는 방식으로 구현되어 있기 때문입니다. \n예를 들어, OrderService 클래스에서는 JDBC를 사용하여 직접 SQL 쿼리를 실행하고 있습니다.\nOrderService.java\npublic String createOrder(OrderRequest orderRequest) {\n    String sql = \"INSERT INTO orders (order_id, menu, delivery_address, payment_method) VALUES (?, ?, ?, ?)\";\n}\n\nOrderService.java\npublic String updateOrderStatus(String orderId, UpdateOrderStatusRequest updateOrderStatusRequest) {\n    String sql = \"UPDATE orders SET status = ? WHERE order_id = ?\";\n}\n이러한 형식은 각 트랜잭션을 개발 스크립트로 처리하는 트랜잭션 스크립트 패턴의 특징을 나타냅니다.\n```\n\n### 클래스다이어그램을 통한 정적분석\n\n- 클래스다이어그램을 통해 폴더를 분석하기 위해 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 이 모듈의 구조를 클래스다이어그램으로 설명해줘\n```\n- 프롬프팅 결과, 아래와 같이 클래스 다이어그램으로 생성된 것을 확인할 수 있습니다.\n</mark-down>\n<mark-down class=\"content\" source='\n<img src=\"https://github.com/msa-ez/llmschool.github.io/assets/123912988/f7f85504-2e84-4ded-ac84-da7d8802f017\" width=\"700\" height=\"600\" alt=\"\">\n'></mark-down>\n<mark-down class=\"content\">\n### 시퀀스다이어그램을 통한 동적분석\n\n- 시퀀스다이어그램을 통해 폴더를 분석하기 위해 다음과 같이 프롬프트를 입력합니다.\n\n```\nPrompt: 이 모듈의 동작구조를 시퀀스다이어그램으로 설명해줘\n```\n- 프롬프팅 결과, 아래와 같이 시퀀스 다이어그램이 생성된 것을 확인할 수 있습니다.\n```\n시퀀스 다이어그램은 객체 간의 상호작용을 시간 순서에 따라 나타내는 UML 다이어그램입니다. OrderController와 관련된 클래스들의 동작 과정을 시퀀스 다이어그램으로 표현하면 다음과 같습니다.\n\n이 시나리오에서는 클라이언트가 OrderController를 통해 새로운 주문을 생성하는 과정을 나타냅니다.\n\n1. 클라이언트(Client)가 OrderController에 주문 생성 요청을 1회 요청합니다.\n2. OrderController는 OrderService의 createOrder 메소드를 호출하여 비즈니스 로직을 처리합니다.\n3. OrderService는 주문 정보를 데이터베이스에 저장하기 위해 JdbcTemplate을 사용합니다.\n4. 데이터베이스 작업이 성공적으로 완료되면, OrderService는 주문 ID를 반환합니다.\n5. OrderController는 클라이언트에게 응답을 반환합니다.\n\n+----------------+                     +-------------------+                     +----------------+\n|     Client     |                     |   OrderController |                     |  OrderService  |\n+----------------+                     +-------------------+                     +----------------+\n        |                                       |                                       |\n        |----- createOrder(request) ----------->|                                       |\n        |                                       |----- createOrder(request) ----------->|\n        |                                       |                                       |----- INSERT INTO orders(...) ----->\n        |                                       |                                       |<---- orderId -------------------|\n        |<---- Response ------------------------|                                       |\n        |                                       |                                       |\n+----------------+                     +-------------------+                     +----------------+\n```\n\n* 결과값으로 다이어그램이 정상 생성되지 않는다면, 다음과 같이 프롬프트를 추가로 입력하여 나온 결과값을 복사하여 https://sequencediagram.org/ 에 paste를 진행하면 생성된 결과값을 확인할 수 있습니다.\n\n```\nPrompt: sequencediagram.org 문법으로 작성해줘\n```\n\n### 신규 코드 스타일로 레거시 전환\n\nAI를 활용한다면 설계 패턴에 따라 코드를 변경하거나 다른 마이크로서비스의 코드를 참조하여 코드 스타일을 변경할 수 있습니다.\n\n먼저 설계 패턴에 따라 코드를 변경하는 방법입니다.\n\n- Copilot 창에 폴더 멘션을 진행한 상태에서 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 해당 어플리케이션을 Clean Architecture와 JPA를 사용하는 방식으로 전환해줘\n```\n- 프롬프팅 결과, 아래와 같이 전환된 코드가 생성되는 것을 확인할 수 있습니다.\n</mark-down>\n<mark-down class=\"content\" source='\n```\n1. 도메인 엔티티\n@Entity\npublic class Order {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<MenuSelection> menuSelections;\n\n    private String deliveryAddress;\n    private String paymentMethod;\n    private String status;\n\n    // Getters and setters\n}\n\n2. 리포지토리 인터페이스\npublic interface OrderRepository extends JpaRepository<Order, Long> {\n}\n\n3. 서비스 계층\n기존의 JDBC를 사용하는 방식에서 JPA 리포지토리를 사용하는 방식으로 변경합니다.\n@Service\npublic class OrderService {\n\n    private final OrderRepository orderRepository;\n\n    @Autowired\n    public OrderService(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    public Order createOrder(OrderRequest orderRequest) {\n        Order order = new Order();\n        // Order 객체 생성\n        return orderRepository.save(order);\n    }\n}\n```\n'></mark-down>\n<mark-down class=\"content\">\n다음은 JSP기반으로 구성된 파일을 분리하여 요구사항에 맞게 코드를 전환하는 예제입니다.\nJSP란 Java를 이용한 서버 사이드 템플릿 엔진이며, 자바를 웹서버에서 사용하기 위한 도구를 의미합니다.\n\n- 먼저, 'createPayment.jsp'파일을 띄운 후 Ctrl + L OPEN AI를 실행합니다.\n\n- 이후 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 이 jsp파일을 클린아키텍쳐로 전환하려고해. 프론트엔드는 react.js로 백엔드는 spring-boot로 전환할거고 이해했다면 ok라고만 답해줘.\n```\n프롬프트에 대한 결과값을 바로 반환하지 않는 이유는 예상되는 결과값 즉, context가 클 경우 OPEN AI가 가지고 있는 토큰수의 범위내에서 답변하려는 성질로 인해 좋은 결과값을 기대하기 어렵습니다.\n따라서 사전에 파일과 요구사항에 대한 정보를 제공하고 이후 전체 요구사항을 분리하여 더욱 좋은 결과값을 반환시키도록 해야합니다. \n\n- 먼저 백엔드에 대한 코드를 생성하기 위해 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 백엔드부터 클린아키텍쳐로 전환해줘\n```\n- 프롬프팅 결과, 사전에 제공받은 정보중 백엔드에 관한 정보를 토대로 클린아키텍쳐로 전환한 코드를 아래와 같이 생성합니다.\n</mark-down>\n<mark-down class=\"content\" source='\n```\n1. Domain\npackage com.example.paymentmanagement.domain;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport java.math.BigDecimal;\n\n@Entity\npublic class Payment {\n    @Id\n    private String paymentId;\n    private String method;\n    private BigDecimal amount;\n\n    // Constructors, Getters and Setters\n}\n\n2. Repository\npackage com.example.paymentmanagement.repository;\n\nimport com.example.paymentmanagement.domain.Payment;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface PaymentRepository extends JpaRepository<Payment, String> {\n}\n\n3. Service\n\npackage com.example.paymentmanagement.service;\n\nimport com.example.paymentmanagement.domain.Payment;\n\npublic interface PaymentService {\n    Payment createPayment(Payment payment);\n}\n\n```\n'></mark-down>\n<mark-down class=\"content\">\n    \n- 이후 프론트엔드에 대한 코드를 생성하기 위해 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 프론트엔트도 전환해줘\n```\n- 프롬프팅 결과, 백엔드와 마찬가지로 사전에 제공받은 정보중 프론트엔드에 관한 요구사항을 토대로 전환한 코드를 아래와 같이 생성된 것을 확인할 수 있습니다.\n\n```\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction CreatePaymentComponent() {\n    const [paymentMethod, setPaymentMethod] = useState('');\n    const [amount, setAmount] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post('/payments', {\n                method: paymentMethod,\n                amount: amount,\n            });\n            console.log('Payment Created:', response.data);\n            // Reset form or handle success\n        } catch (error) {\n            console.error('Error creating payment:', error);\n            // Handle error\n        }\n    };\n</mark-down>\n<mark-down class=\"content\" source='\n```\n    return (\n        <div>\n            <h2>Create Payment</h2>\n            <form onSubmit={handleSubmit}>\n                Payment Method: <input type=\"text\" value={paymentMethod} onChange={(e) => setPaymentMethod(e.target.value)} />\n                Amount: <input type=\"text\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    );\n}\nexport default CreatePaymentComponent;\n```\n'></mark-down>\n    </div>\n</template>\n\n\n<script>\n    // @group 01_01_04\n    export default {\n        name:'Legacy',\n        data() {\n            return {}\n        },\n        props: {\n            \"레거시 분석과 전환\": {\n                type: String\n            },\n        },\n    }\n</script>\n","path":"/operation/introduction/legacy/","props":[{"name":"레거시 분석과 전환"}],"componentDesc":{"group":["01_01_04"]},"fileInfo":{"name":"Legacy","path":"operation/introduction/Legacy.vue","directory":"operation/introduction"}},"allPagesByName":{"edges":[{"node":{"id":"521ea353b5b2ec2c3e0f9f5be3a13039","name":"index","path":"/llm/llm/","props":[{"name":"설치형 LLM"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"llm/llm/index.vue","directory":"llm/llm"}}},{"node":{"id":"491a019883e24d1ade45318efd39fa7e","name":"index","path":"/operation/course/","props":[{"name":"교육과정 소개"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/course/index.vue","directory":"operation/course"}}},{"node":{"id":"455485b89fc07a2011135c71b3e5b06d","name":"index","path":"/operation/introduction/","props":[{"name":"AI 코딩 도구"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/introduction/index.vue","directory":"operation/introduction"}}},{"node":{"id":"ddac7512ff1cb42577161679388846a0","name":"index","path":"/operation/implement/","props":[{"name":"구현"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/implement/index.vue","directory":"operation/implement"}}},{"node":{"id":"dfe15286a0af9af4cf957c89714797f4","name":"index","path":"/operation/llm-msaez/","props":[{"name":"Overview"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/llm-msaez/index.vue","directory":"operation/llm-msaez"}}},{"node":{"id":"0bb6a8c5fa0e1266e2ccecc243fa5470","name":"index","path":"/operation/operate/","props":[{"name":"배포/운영"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/operate/index.vue","directory":"operation/operate"}}},{"node":{"id":"eeaab9630dc4711635747aa9fda862d7","name":"index","path":"/operation/planning/","props":[{"name":"분석/설계"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/planning/index.vue","directory":"operation/planning"}}},{"node":{"id":"ca5edeb926047bc16e52379ccb4cdbd6","name":"IDE","path":"/operation/introduction/ide/","props":[{"name":"Cursor IDE"}],"componentDesc":{"group":["01_01_02"]},"fileInfo":{"name":"IDE","path":"operation/introduction/IDE.vue","directory":"operation/introduction"}}},{"node":{"id":"b226ba8089a5b8e4cc79a46bdf60d587","name":"SW","path":"/operation/introduction/sw/","props":[{"name":"테스트생성과 패턴적용"}],"componentDesc":{"group":["01_01_03"]},"fileInfo":{"name":"SW","path":"operation/introduction/SW.vue","directory":"operation/introduction"}}},{"node":{"id":"ef65af528625f3df4341f189681a2066","name":"Legacy","path":"/operation/introduction/legacy/","props":[{"name":"레거시 분석과 전환"}],"componentDesc":{"group":["01_01_04"]},"fileInfo":{"name":"Legacy","path":"operation/introduction/Legacy.vue","directory":"operation/introduction"}}},{"node":{"id":"d894f03fb84bd2357e5f6115f61b2cd9","name":"GPT-Engineer","path":"/operation/introduction/gpt-engineer/","props":[{"name":"GPT-Engineer"}],"componentDesc":{"group":["01_01_05"]},"fileInfo":{"name":"Gpt-engineer","path":"operation/introduction/Gpt-engineer.vue","directory":"operation/introduction"}}},{"node":{"id":"7e9f91dcd66fc903b29ed35c1bdb3953","name":"Continue","path":"/operation/introduction/continue/","props":[{"name":"Continue 코파일럿"}],"componentDesc":{"group":["01_01_06"]},"fileInfo":{"name":"Continue","path":"operation/introduction/Continue.vue","directory":"operation/introduction"}}},{"node":{"id":"8436578d14e4c980d7c1ee8fa899962a","name":"Kubernetes","path":"/operation/introduction/kubectl-ai/","props":[{"name":"쿠버네티스 AI 플러그인"}],"componentDesc":{"group":["01_01_07"]},"fileInfo":{"name":"Kubectl-AI","path":"operation/introduction/Kubectl-AI.vue","directory":"operation/introduction"}}},{"node":{"id":"3bd2f88491ffe8e5d3e0cb8f5ad49c5e","name":"GPT-Engineer-dev","path":"/operation/implement/gpt-engineer-dev/","props":[{"name":"MSA Chassis by Autopilot"}],"componentDesc":{"group":["01_03_02"]},"fileInfo":{"name":"GPT-Engineer-dev","path":"operation/implement/GPT-Engineer-dev.vue","directory":"operation/implement"}}},{"node":{"id":"bec8e6134b4833a31df0a230c20b0464","name":"Copilot-dev","path":"/operation/implement/copilot-dev/","props":[{"name":"Business Logic by Copilot"}],"componentDesc":{"group":["01_03_03"]},"fileInfo":{"name":"Copilot-dev","path":"operation/implement/Copilot-dev.vue","directory":"operation/implement"}}},{"node":{"id":"c6aafe599a891c74b0fb229795490cdd","name":"Fastfood","path":"/operation/operate/copilot-dockerising/","props":[{"name":"Github Action 활용"}],"componentDesc":{"group":["01_04_02"]},"fileInfo":{"name":"Copilot-dockerising","path":"operation/operate/Copilot-dockerising.vue","directory":"operation/operate"}}},{"node":{"id":"ac0be07f9c57dce30509a7d323a406e6","name":"Kubectl-ai","path":"/operation/operate/kubectl-ai/","props":[{"name":"Kubectl OpenAI Plugin"}],"componentDesc":{"group":["01_04_03"]},"fileInfo":{"name":"Kubectl-ai","path":"operation/operate/Kubectl-ai.vue","directory":"operation/operate"}}},{"node":{"id":"f3d7168080d3c0d2ee96cd83a9434c8c","name":"Ai-ops-trouble-shooting","path":"/operation/operate/ai-ops-trouble-shooting/","props":[{"name":"Kubernetes Trouble shooting"}],"componentDesc":{"group":["01_04_04"]},"fileInfo":{"name":"Ai-ops-trouble-shooting","path":"operation/operate/Ai-ops-trouble-shooting.vue","directory":"operation/operate"}}},{"node":{"id":"8de86484c2e4943142d33cb5568bad99","name":"AutoModeling","path":"/operation/planning/ai-auto-modeling/","props":[{"name":"AI-driven MSA 디자인"}],"componentDesc":{"group":["02_01_02"]},"fileInfo":{"name":"Ai-auto-modeling","path":"operation/planning/Ai-auto-modeling.vue","directory":"operation/planning"}}},{"node":{"id":"f20ca5519dcdfdfd2a9b75f166de4303","name":"LLM-Model","path":"/llm/llm/llm-model/","props":[{"name":"Open Source LLM"}],"componentDesc":{"group":["05_01_02"]},"fileInfo":{"name":"LLM-model","path":"llm/llm/LLM-model.vue","directory":"llm/llm"}}},{"node":{"id":"32fb961852082ac931ed4dfc51178da6","name":"LLM-Setting","path":"/llm/llm/llm-setting/","props":[{"name":"설치형 LLM 개발 환경 구성"}],"componentDesc":{"group":["05_01_03"]},"fileInfo":{"name":"LLM-setting","path":"llm/llm/LLM-setting.vue","directory":"llm/llm"}}},{"node":{"id":"480ae649e5360217a72b11cabcefb6dc","name":"Ollama","path":"/llm/llm/ollama/","props":[{"name":"Ollama"}],"componentDesc":{"group":["05_01_04"]},"fileInfo":{"name":"ollama","path":"llm/llm/ollama.vue","directory":"llm/llm"}}},{"node":{"id":"52c918cf6bf34c4bdf3b4235e65147d4","name":"Open-Web","path":"/llm/llm/open-web-ui/","props":[{"name":"Open Web UI"}],"componentDesc":{"group":["05_01_05"]},"fileInfo":{"name":"open-web-ui","path":"llm/llm/open-web-ui.vue","directory":"llm/llm"}}},{"node":{"id":"388fff31369b007c6efc46b2e289576e","name":"Overview","path":"/operation/llm-msaez/overview/","props":[{"name":"과정개요"}],"componentDesc":{"group":["06_01_02"]},"fileInfo":{"name":"Overview","path":"operation/llm-msaez/Overview.vue","directory":"operation/llm-msaez"}}}]},"allPages":{"edges":[{"node":{"name":"AutoModeling","path":"/operation/planning/ai-auto-modeling/","fileInfo":{"name":"Ai-auto-modeling","directory":"operation/planning"}}},{"node":{"name":"index","path":"/operation/planning/","fileInfo":{"name":"index","directory":"operation/planning"}}},{"node":{"name":"index","path":"/operation/operate/","fileInfo":{"name":"index","directory":"operation/operate"}}},{"node":{"name":"Kubectl-ai","path":"/operation/operate/kubectl-ai/","fileInfo":{"name":"Kubectl-ai","directory":"operation/operate"}}},{"node":{"name":"Fastfood","path":"/operation/operate/copilot-dockerising/","fileInfo":{"name":"Copilot-dockerising","directory":"operation/operate"}}},{"node":{"name":"Ai-ops-trouble-shooting","path":"/operation/operate/ai-ops-trouble-shooting/","fileInfo":{"name":"Ai-ops-trouble-shooting","directory":"operation/operate"}}},{"node":{"name":"index","path":"/operation/llm-msaez/","fileInfo":{"name":"index","directory":"operation/llm-msaez"}}},{"node":{"name":"Overview","path":"/operation/llm-msaez/overview/","fileInfo":{"name":"Overview","directory":"operation/llm-msaez"}}},{"node":{"name":"index","path":"/operation/implement/","fileInfo":{"name":"index","directory":"operation/implement"}}},{"node":{"name":"Copilot-dev","path":"/operation/implement/copilot-dev/","fileInfo":{"name":"Copilot-dev","directory":"operation/implement"}}},{"node":{"name":"GPT-Engineer-dev","path":"/operation/implement/gpt-engineer-dev/","fileInfo":{"name":"GPT-Engineer-dev","directory":"operation/implement"}}},{"node":{"name":"index","path":"/operation/introduction/","fileInfo":{"name":"index","directory":"operation/introduction"}}},{"node":{"name":"SW","path":"/operation/introduction/sw/","fileInfo":{"name":"SW","directory":"operation/introduction"}}},{"node":{"name":"Legacy","path":"/operation/introduction/legacy/","fileInfo":{"name":"Legacy","directory":"operation/introduction"}}},{"node":{"name":"Kubernetes","path":"/operation/introduction/kubectl-ai/","fileInfo":{"name":"Kubectl-AI","directory":"operation/introduction"}}},{"node":{"name":"IDE","path":"/operation/introduction/ide/","fileInfo":{"name":"IDE","directory":"operation/introduction"}}},{"node":{"name":"GPT-Engineer","path":"/operation/introduction/gpt-engineer/","fileInfo":{"name":"Gpt-engineer","directory":"operation/introduction"}}},{"node":{"name":"Continue","path":"/operation/introduction/continue/","fileInfo":{"name":"Continue","directory":"operation/introduction"}}},{"node":{"name":"index","path":"/operation/course/","fileInfo":{"name":"index","directory":"operation/course"}}},{"node":{"name":"index","path":"/llm/llm/","fileInfo":{"name":"index","directory":"llm/llm"}}},{"node":{"name":"Open-Web","path":"/llm/llm/open-web-ui/","fileInfo":{"name":"open-web-ui","directory":"llm/llm"}}},{"node":{"name":"Ollama","path":"/llm/llm/ollama/","fileInfo":{"name":"ollama","directory":"llm/llm"}}},{"node":{"name":"LLM-Setting","path":"/llm/llm/llm-setting/","fileInfo":{"name":"LLM-setting","directory":"llm/llm"}}},{"node":{"name":"LLM-Model","path":"/llm/llm/llm-model/","fileInfo":{"name":"LLM-model","directory":"llm/llm"}}}]}},"context":{"pathRegexp":"^$path.+$"}}