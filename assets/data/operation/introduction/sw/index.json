{"hash":"d41dbdb9589706410e7e5544724c1f30d2cb8b41","data":{"thisPage":{"id":"b226ba8089a5b8e4cc79a46bdf60d587","name":"SW","mockData":"{\"Cursor IDE- 테스트/ 디자인 패턴\":\"Generic Metal Chicken\"}","source":"<template>\n    <div>\n        <mark-down class=\"content\">\n            \n\n## Cursor IDE를 활용한 테스트 생성\n소프트웨어를 개발할 때 가장 중요한 것은 비즈니스 요청자와의 소통으로 개발자에게 전달되는 요구사항에 대하여 이해하는것이 가장 중요합니다. \n이를 위해 TDD(Test Driven Development)즉, 테스트를 먼저 작성한 이후 개발을 진행하는 방식을 필요로하며, AI를 통해 요구사항에 걸맞는 TDD를 손쉽게 작성할 수 있습니다.\n\n다음은 보험상품에 대하여 자바로 테스트 코드를 작성하는 예제입니다.\n\n- 아래 이미지 복사 > Cursor IDE > Ctrl + L 을 눌러 Copilot 창에서 아래 프롬프트를 입력합니다.\n```\nPrompt: 다음은 보험상품의 디시전 테이블이다. 이 규칙을 담은 JUnit Test를 작성해줘\n```\n</mark-down>\n<mark-down class=\"content\" source='\n<img src=\"https://github.com/msa-ez/llmschool.github.io/assets/123912988/99894c8e-19b9-4dc2-a2a8-499ed7beea15\" width=\"700\" height=\"600\" alt=\"\">\n'></mark-down>\n<mark-down class=\"content\">\n- 프롬프팅 결과, 아래와 유사한 JUnit Test 코드를 AI가 생성해 준다.\n```\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class InsuranceProductTest {\n\n    @Test\n    public void testARankAgeBetween20And40() {\n        InsuranceProduct product = new InsuranceProduct();\n        String result = product.evaluate(30, \"g\", \"n\"); // age, condition3, condition4\n        assertEquals(\"A rank\", result);\n    }\n\n    @Test\n    public void testARankAgeOver40() {\n        InsuranceProduct product = new InsuranceProduct();\n        String result = product.evaluate(45, \"g\", \"n\"); // age, condition3, condition4\n        assertEquals(\"A rank\", result);\n    }\n\n    @Test\n    public void testDRankAgeOver40Condition3BCondition4Y() {\n        InsuranceProduct product = new InsuranceProduct();\n        String result = product.evaluate(45, \"b\", \"y\"); // age, condition3, condition4\n        assertEquals(\"D rank\", result);\n    }\n}\n```\n\n생성된 JUit Test 코드를 기반으로 테스트를 통과할 수 있는 코드 생성을 위해 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 위의 테스트를 통과할 수 있는 모듈을 작성해\n```\n- 프롬프팅 결과, 아래와 유사한 보험상품의 로직 코드를 AI가 생성해 준다.\n```\npublic class InsuranceProduct {\n    public String evaluate(int age, String condition3, String condition4) {\n        if (age >= 20 && age < 41 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"A rank\";\n        } else if (age >= 40 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"A rank\";\n        } else if (age >= 20 && age < 41 && \"g\".equals(condition3) && \"y\".equals(condition4)) {\n            return \"B rank\";\n        } else if (age >= 40 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"B rank\";\n        } else if (age >= 20 && age < 41 && \"b\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"C rank\";\n        } else if (age >= 40 && \"b\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"C rank\";\n        } else if (age >= 20 && age < 41 && \"b\".equals(condition3) && \"y\".equals(condition4)) {\n            return \"D rank\";\n        } else if (age >= 40 && \"b\".equals(condition3) && \"y\".equals(condition4)) {\n            return \"D rank\";\n        }\n        // 기타 조건으로 처리되지 않는 경우\n        return \"Unknown rank\";\n    }\n}\n```\n### 디자인 패턴을 활용한 리팩토링\n\n확장성 보완을 위해 디자인 패턴들을 추천받아 코드를 리팩토링하는 방법은 다음과 같습니다.\n\n- 먼저 OPEN AI에 디자인 패턴을 추천받기 위해, 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: if ~ then ~ else가 확장성이 떨어져 보여. 이를 해결할 디자인 패턴들이 있다면 하나이상 추천해줘\n```\n- 프롬프팅 결과, 아래와 같은 다양한 전략패턴을 생성합니다. \n```\n1. 전략 패턴 (Strategy Pattern):\n- 각 전략에 대한 행동들을 별도의 클래스로 분리하여, 실행 중에 알고리즘을 선택할 수 있게 합니다.\n- 장점: 알고리즘을 사용하는 클라이언트와 독립적으로 알고리즘을 변경할 수 있습니다.\n- 단점: 많은 수의 클래스가 생성될 수 있으며, 각 전략에 대한 객체를 생성할 필요가 있을 수 있습니다.\n\n2. 상태 패턴 (State Pattern):\n- 객체의 상태 변화에 따라 객체의 행동을 변화할 수 있게 합니다. 즉, 객체의 내부 상태에 따라서, 객체에게 적절한 행동을 요청합니다.\n- 장점: 상태에 따른 행동 변화를 클래스 분리를 통해 명확하게 표현할 수 있습니다.\n- 단점: 상태가 많아질수록 관련 클래스도 많아지고 복잡도가 증가할 수 있습니다.\n\n3. 체인 오브 리스폰서빌리티 패턴 (Chain of Responsibility Pattern):\n- 요청을 처리할 수 있는 기회를 하나 이상의 객체에게 부여하여, 한 객체에서 다른 객체로 요청을 전달하는 방식입니다.\n- 장점: 요청을 보내는 객체는 받는 객체의 존재를 몰라도 되며, 객체 사이의 결합도를 낮출 수 있습니다.\n- 단점: 요청 처리기가 예측하기 어려운 방식으로 연결될 수 있습니다.\n\n4. 테이블 주도 패턴 (Table-driven Pattern):\n- 조건과 결과를 데이터 형태로 표현하여, 로직을 데이터 구조로 변환합니다.\n- 장점: 조건 분기가 복잡한 경우 용이하며, 로직을 데이터로 관리할 수 있습니다.\n- 단점: 복잡한 조건의 경우 데이터의 복잡성이 증가할 수 있으며, 성능 저하가 발생할 수 있습니다.\n\n전략 패턴과 상태 패턴은 유사한 점이 많지만, 전략 패턴은 알고리즘의 교체에 초점을 맞추고, 상태 패턴은 객체의 상태 변화에 따른 행동의 변화에 초점을 맞춥니다. 체인 오브 리스폰서빌리티 패턴은 요청을 처리할 수 있는 객체 사이의 체인을 형성하고, 각 객체가 요청을 처리할 수 있는지 확인합니다. 테이블 주도 패턴은 데이터 중심의 접근 방식으로, 조건과 결과를 데이터로 관리하여 유연성을 제공합니다.\n이러한 패턴들 중에서, 본문 상황과 문맥을 고려할 때 가장 적합한 패턴은 전략 패턴이나 테이블 주도 패턴일 수 있습니다. 전략 패턴은 각 조건별로 별도의 클래스로 구현할 수 있으며, 테이블 주도 패턴은 조건과 데이터를 관리하여 유연성을 제공합니다.\n```\n- 생성된 디자인 패턴중 전략패턴을 적용하여 리팩토링 하기 위해 다음과 같이 프롬프트를 입력합니다.\n```\nPrompt: 전략패턴을 적용해줘\n```\n- 프롬프팅 결과, 아래와 같이 전략패턴이 적용된 코드가 생성된 것을 확인할 수 있습니다.\n</mark-down>\n<mark-down class=\"content\" source='\n```\n1. 평가 전략 인터페이스\npublic interface EvaluationStrategy {\n    String evaluate(int age, String condition3, String condition4);\n}\n\n\n2. 구체적인 전략 클래스\npublic class ARankStrategy implements EvaluationStrategy {\n    @Override\n    public String evaluate(int age, String condition3, String condition4) {\n        if (age >= 20 && age < 41 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"A rank\";\n        } else if (age >= 40 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"A rank\";\n        }\n        return null;\n    }\n}\n\npublic class BRankStrategy implements EvaluationStrategy {\n    @Override\n    public String evaluate(int age, String condition3, String condition4) {\n        if (age >= 20 && age < 41 && \"g\".equals(condition3) && \"y\".equals(condition4)) {\n            return \"B rank\";\n        } else if (age >= 40 && \"g\".equals(condition3) && \"n\".equals(condition4)) {\n            return \"B rank\";\n        }\n        return null;\n    }\n}\n\n3. 컨텍스트 클래스\n\nimport java.util.List;\n\npublic class InsuranceProduct {\n    private List<EvaluationStrategy> strategies;\n\n    public InsuranceProduct(List<EvaluationStrategy> strategies) {\n        this.strategies = strategies;\n    }\n\n    public String evaluate(int age, String condition3, String condition4) {\n        for (EvaluationStrategy strategy : strategies) {\n            String result = strategy.evaluate(age, condition3, condition4);\n            if (result != null) {\n                return result;\n            }\n        }\n        return \"Unknown rank\";\n    }\n}\n\n4. 전략 사용\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<EvaluationStrategy> strategies = Arrays.asList(\n            new ARankStrategy(),\n            new BRankStrategy(),\n            // ... 다른 전략 클래스들 여기에 추가 ...\n            new CRankStrategy(),\n            new DRankStrategy()\n        );\n\n        InsuranceProduct product = new InsuranceProduct(strategies);\n        String rank = product.evaluate(25, \"g\", \"n\");\n        System.out.println(\"The rank is: \" + rank);\n    }\n}\n\n```\n'>\n</mark-down>\n\n    </div>\n</template>\n\n\n<script>\n    // @group 01_01_03\n    export default {\n        name:'SW',\n        data() {\n            return {}\n        },\n        props: {\n            \"Cursor IDE- 테스트/ 디자인 패턴\": {\n                type: String\n            },\n        },\n    }\n</script>\n","path":"/operation/introduction/sw/","props":[{"name":"Cursor IDE- 테스트/ 디자인 패턴"}],"componentDesc":{"group":["01_01_03"]},"fileInfo":{"name":"SW","path":"operation/introduction/SW.vue","directory":"operation/introduction"}},"allPagesByName":{"edges":[{"node":{"id":"521ea353b5b2ec2c3e0f9f5be3a13039","name":"index","path":"/llm/llm/","props":[{"name":"설치형 LLM"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"llm/llm/index.vue","directory":"llm/llm"}}},{"node":{"id":"491a019883e24d1ade45318efd39fa7e","name":"index","path":"/operation/course/","props":[{"name":"교육과정 소개"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/course/index.vue","directory":"operation/course"}}},{"node":{"id":"ddac7512ff1cb42577161679388846a0","name":"index","path":"/operation/implement/","props":[{"name":"구현"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/implement/index.vue","directory":"operation/implement"}}},{"node":{"id":"455485b89fc07a2011135c71b3e5b06d","name":"index","path":"/operation/introduction/","props":[{"name":"AI Tools"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/introduction/index.vue","directory":"operation/introduction"}}},{"node":{"id":"0bb6a8c5fa0e1266e2ccecc243fa5470","name":"index","path":"/operation/operate/","props":[{"name":"배포/운영"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/operate/index.vue","directory":"operation/operate"}}},{"node":{"id":"dfe15286a0af9af4cf957c89714797f4","name":"index","path":"/operation/llm-msaez/","props":[{"name":"Overview"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/llm-msaez/index.vue","directory":"operation/llm-msaez"}}},{"node":{"id":"eeaab9630dc4711635747aa9fda862d7","name":"index","path":"/operation/planning/","props":[{"name":"분석/설계"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/planning/index.vue","directory":"operation/planning"}}},{"node":{"id":"ca5edeb926047bc16e52379ccb4cdbd6","name":"IDE","path":"/operation/introduction/ide/","props":[{"name":"Cursor IDE"}],"componentDesc":{"group":["01_01_02"]},"fileInfo":{"name":"IDE","path":"operation/introduction/IDE.vue","directory":"operation/introduction"}}},{"node":{"id":"b226ba8089a5b8e4cc79a46bdf60d587","name":"SW","path":"/operation/introduction/sw/","props":[{"name":"Cursor IDE- 테스트/ 디자인 패턴"}],"componentDesc":{"group":["01_01_03"]},"fileInfo":{"name":"SW","path":"operation/introduction/SW.vue","directory":"operation/introduction"}}},{"node":{"id":"ef65af528625f3df4341f189681a2066","name":"Legacy","path":"/operation/introduction/legacy/","props":[{"name":"Cursor IDE- 레거시 분석/ 전환"}],"componentDesc":{"group":["01_01_04"]},"fileInfo":{"name":"Legacy","path":"operation/introduction/Legacy.vue","directory":"operation/introduction"}}},{"node":{"id":"d894f03fb84bd2357e5f6115f61b2cd9","name":"GPT-Engineer","path":"/operation/introduction/gpt-engineer/","props":[{"name":"GPT-Engineer"}],"componentDesc":{"group":["01_01_05"]},"fileInfo":{"name":"Gpt-engineer","path":"operation/introduction/Gpt-engineer.vue","directory":"operation/introduction"}}},{"node":{"id":"7e9f91dcd66fc903b29ed35c1bdb3953","name":"Continue","path":"/operation/introduction/continue/","props":[{"name":"Continue"}],"componentDesc":{"group":["01_01_06"]},"fileInfo":{"name":"Continue","path":"operation/introduction/Continue.vue","directory":"operation/introduction"}}},{"node":{"id":"8436578d14e4c980d7c1ee8fa899962a","name":"Kubernetes","path":"/operation/introduction/kubectl-ai/","props":[{"name":"Kubectl-ai / K8sGPT"}],"componentDesc":{"group":["01_01_07"]},"fileInfo":{"name":"Kubectl-AI","path":"operation/introduction/Kubectl-AI.vue","directory":"operation/introduction"}}},{"node":{"id":"3bd2f88491ffe8e5d3e0cb8f5ad49c5e","name":"GPT-Engineer-dev","path":"/operation/implement/gpt-engineer-dev/","props":[{"name":"GPT-Engineer를 활용한 MSA 구현"}],"componentDesc":{"group":["01_03_02"]},"fileInfo":{"name":"GPT-Engineer-dev","path":"operation/implement/GPT-Engineer-dev.vue","directory":"operation/implement"}}},{"node":{"id":"bec8e6134b4833a31df0a230c20b0464","name":"Copilot-dev","path":"/operation/implement/copilot-dev/","props":[{"name":"Copilot을 활용한 비즈니스 로직 구현"}],"componentDesc":{"group":["01_03_03"]},"fileInfo":{"name":"Copilot-dev","path":"operation/implement/Copilot-dev.vue","directory":"operation/implement"}}},{"node":{"id":"c6aafe599a891c74b0fb229795490cdd","name":"Fastfood","path":"/operation/operate/copilot-dockerising/","props":[{"name":"Copilot을 활용한 클라우드 배포 준비"}],"componentDesc":{"group":["01_04_02"]},"fileInfo":{"name":"Copilot-dockerising","path":"operation/operate/Copilot-dockerising.vue","directory":"operation/operate"}}},{"node":{"id":"ac0be07f9c57dce30509a7d323a406e6","name":"Kubectl-ai","path":"/operation/operate/kubectl-ai/","props":[{"name":"AI기반 YAML 자동생성&오케스트레이션"}],"componentDesc":{"group":["01_04_03"]},"fileInfo":{"name":"Kubectl-ai","path":"operation/operate/Kubectl-ai.vue","directory":"operation/operate"}}},{"node":{"id":"f3d7168080d3c0d2ee96cd83a9434c8c","name":"Ai-ops-trouble-shooting","path":"/operation/operate/ai-ops-trouble-shooting/","props":[{"name":"AI Ops Trouble shooting"}],"componentDesc":{"group":["01_04_04"]},"fileInfo":{"name":"Ai-ops-trouble-shooting","path":"operation/operate/Ai-ops-trouble-shooting.vue","directory":"operation/operate"}}},{"node":{"id":"8de86484c2e4943142d33cb5568bad99","name":"AutoModeling","path":"/operation/planning/ai-auto-modeling/","props":[{"name":"AI를 활용한 MSA설계"}],"componentDesc":{"group":["02_01_02"]},"fileInfo":{"name":"Ai-auto-modeling","path":"operation/planning/Ai-auto-modeling.vue","directory":"operation/planning"}}},{"node":{"id":"f20ca5519dcdfdfd2a9b75f166de4303","name":"LLM-Model","path":"/llm/llm/llm-model/","props":[{"name":"Open source LLM"}],"componentDesc":{"group":["05_01_02"]},"fileInfo":{"name":"LLM-model","path":"llm/llm/LLM-model.vue","directory":"llm/llm"}}},{"node":{"id":"32fb961852082ac931ed4dfc51178da6","name":"LLM-Setting","path":"/llm/llm/llm-setting/","props":[{"name":"설치형 LLM 기반 개발 환경 구성"}],"componentDesc":{"group":["05_01_03"]},"fileInfo":{"name":"LLM-setting","path":"llm/llm/LLM-setting.vue","directory":"llm/llm"}}},{"node":{"id":"480ae649e5360217a72b11cabcefb6dc","name":"Ollama","path":"/llm/llm/ollama/","props":[{"name":"Ollama"}],"componentDesc":{"group":["05_01_04"]},"fileInfo":{"name":"ollama","path":"llm/llm/ollama.vue","directory":"llm/llm"}}},{"node":{"id":"52c918cf6bf34c4bdf3b4235e65147d4","name":"Open-Web","path":"/llm/llm/open-web-ui/","props":[{"name":"Open Web UI"}],"componentDesc":{"group":["05_01_05"]},"fileInfo":{"name":"open-web-ui","path":"llm/llm/open-web-ui.vue","directory":"llm/llm"}}},{"node":{"id":"388fff31369b007c6efc46b2e289576e","name":"Overview","path":"/operation/llm-msaez/overview/","props":[{"name":"AI 코딩 과정 개요"}],"componentDesc":{"group":["06_01_02"]},"fileInfo":{"name":"Overview","path":"operation/llm-msaez/Overview.vue","directory":"operation/llm-msaez"}}}]},"allPages":{"edges":[{"node":{"name":"index","path":"/operation/planning/","fileInfo":{"name":"index","directory":"operation/planning"}}},{"node":{"name":"Overview","path":"/operation/llm-msaez/overview/","fileInfo":{"name":"Overview","directory":"operation/llm-msaez"}}},{"node":{"name":"index","path":"/operation/llm-msaez/","fileInfo":{"name":"index","directory":"operation/llm-msaez"}}},{"node":{"name":"GPT-Engineer","path":"/operation/introduction/gpt-engineer/","fileInfo":{"name":"Gpt-engineer","directory":"operation/introduction"}}},{"node":{"name":"AutoModeling","path":"/operation/planning/ai-auto-modeling/","fileInfo":{"name":"Ai-auto-modeling","directory":"operation/planning"}}},{"node":{"name":"index","path":"/operation/operate/","fileInfo":{"name":"index","directory":"operation/operate"}}},{"node":{"name":"Kubectl-ai","path":"/operation/operate/kubectl-ai/","fileInfo":{"name":"Kubectl-ai","directory":"operation/operate"}}},{"node":{"name":"Fastfood","path":"/operation/operate/copilot-dockerising/","fileInfo":{"name":"Copilot-dockerising","directory":"operation/operate"}}},{"node":{"name":"Ai-ops-trouble-shooting","path":"/operation/operate/ai-ops-trouble-shooting/","fileInfo":{"name":"Ai-ops-trouble-shooting","directory":"operation/operate"}}},{"node":{"name":"index","path":"/operation/introduction/","fileInfo":{"name":"index","directory":"operation/introduction"}}},{"node":{"name":"Copilot-dev","path":"/operation/implement/copilot-dev/","fileInfo":{"name":"Copilot-dev","directory":"operation/implement"}}},{"node":{"name":"Legacy","path":"/operation/introduction/legacy/","fileInfo":{"name":"Legacy","directory":"operation/introduction"}}},{"node":{"name":"SW","path":"/operation/introduction/sw/","fileInfo":{"name":"SW","directory":"operation/introduction"}}},{"node":{"name":"IDE","path":"/operation/introduction/ide/","fileInfo":{"name":"IDE","directory":"operation/introduction"}}},{"node":{"name":"Kubernetes","path":"/operation/introduction/kubectl-ai/","fileInfo":{"name":"Kubectl-AI","directory":"operation/introduction"}}},{"node":{"name":"Continue","path":"/operation/introduction/continue/","fileInfo":{"name":"Continue","directory":"operation/introduction"}}},{"node":{"name":"index","path":"/operation/implement/","fileInfo":{"name":"index","directory":"operation/implement"}}},{"node":{"name":"GPT-Engineer-dev","path":"/operation/implement/gpt-engineer-dev/","fileInfo":{"name":"GPT-Engineer-dev","directory":"operation/implement"}}},{"node":{"name":"index","path":"/operation/course/","fileInfo":{"name":"index","directory":"operation/course"}}},{"node":{"name":"Open-Web","path":"/llm/llm/open-web-ui/","fileInfo":{"name":"open-web-ui","directory":"llm/llm"}}},{"node":{"name":"Ollama","path":"/llm/llm/ollama/","fileInfo":{"name":"ollama","directory":"llm/llm"}}},{"node":{"name":"index","path":"/llm/llm/","fileInfo":{"name":"index","directory":"llm/llm"}}},{"node":{"name":"LLM-Setting","path":"/llm/llm/llm-setting/","fileInfo":{"name":"LLM-setting","directory":"llm/llm"}}},{"node":{"name":"LLM-Model","path":"/llm/llm/llm-model/","fileInfo":{"name":"LLM-model","directory":"llm/llm"}}}]}},"context":{"pathRegexp":"^$path.+$"}}